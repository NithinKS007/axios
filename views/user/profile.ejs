<%- include('../layouts/userLayouts/header') %> <%- include('../layouts/userLayouts/navbar1') %>

        <style>
            .error {
                font-size: 0.8em;
                color: red;
            }

            .small-text {
                font-size: 0.8em;
                line-height: 1.2;
            } 
            .custom-cancel-button {
  background-color: #FFFFFF !important; 
  color: #000000 !important; 
  border: 1px solid #000000 !important; 
  padding: 10px 24px !important; 
}

.custom-confirm-button {
  background-color: #007bff !important; 
  color: #FFFFFF !important; 
  padding: 10px 24px !important; 
}

.swal2-popup {
  width: 90% !important; 
  max-width: 440px !important; 
  padding: 20px !important; 
}

.swal2-title {
  font-size: 17px !important; 
  margin-bottom: 5px !important; 
}

.swal2-content {
  font-size: 12px !important; 
  margin-bottom: 20px !important; 
}

.swal2-actions {
  display: flex;
  justify-content: space-between;
  width: 100%;
}

.swal2-actions .swal2-styled.swal2-confirm {
  order: 1;
  margin-right: 10px;
  flex-grow: 1;
}

.swal2-actions .swal2-styled.swal2-cancel {
  order: 2;
  flex-grow: 1;
}


@media (max-width: 768px) {
  .swal2-title {
    font-size: 15px !important; 
  }

  .swal2-content {
    font-size: 13px !important; 
  }

  .custom-cancel-button,
  .custom-confirm-button {
    padding: 8px 20px !important;
  }
}

@media (max-width: 480px) {
  .swal2-title {
    font-size: 14px !important; 
  }

  .swal2-content {
    font-size: 12px !important; 
  }

  .custom-cancel-button,
  .custom-confirm-button {
    padding: 6px 16px !important; 
  }
}
        </style>
        <main class="main">
            <section class="pt-150 pb-150">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-10 m-auto">
                            <div class="row">
                                <%- include('../layouts/userLayouts/sidebar') %>
                                    <div class="col-md-8">
                                        <div style="
                  background-color: #fff;
                  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12),
                    0 1px 2px rgba(0, 0, 0, 0.24);
                  border: 1px solid #ddd;
                  border-radius: 8px;
                  padding: 20px;
                  margin-bottom: 20px;
                ">
                                            <h1 style="
                    font-size: 24px;
                    font-weight: bold;
                    color: #333;
                    margin-bottom: 16px;
                  ">
                                                PROFILE
                                            </h1>
                                           
                                            <div id="userInfoDisplay">
                                                <p id="userName">
                                                    <strong>Name:</strong>
                                                    <%= userData.fname %>
                                                        <%= userData.lname %>
                                                </p>
                                                <p id="userEmail">
                                                    <strong>Email:</strong>
                                                    <%= userData.email %>
                                                </p>
                                                <% if (userData.phone) { %>
                                                    <p id="userPhone">
                                                        <strong>Phone:</strong>
                                                        <%= userData.phone %>
                                                    </p>
                                                    <% } %>

                                                        <button type="button" class="btn btn-primary"
                                                            onclick="editUserDetails('<%= userData._id %>','<%= userData.fname %>',' <%= userData.lname %>','<%= userData.phone %>')">
                                                            Edit
                                                        </button>
                                                        <button type="button" class="btn btn-primary"
                                                            onclick="editUserPassword('<%= userData._id %>')">
                                                            Edit Password
                                                        </button>
                                            </div>

                                            <!-- edit user details start -->
                                            <div id="editUserForm" style="display: none">
                                                <form id="userDetailsForm">
                                                    <div class="row mb-3">
                                                        <div class="col-md-6">
                                                            <input type="text" id="fnameInput" class="form-control"
                                                                name="fname" placeholder="First Name" required />
                                                                <span id="fnameError" class="error"></span>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <input type="text" id="lnameInput" class="form-control"
                                                                name="lname" placeholder="Last Name" required />
                                                                <span id="lnameError" class="error"></span>
                                                        </div>
                                                    </div>

                                                    <div class="mb-3">
                                                        <input type="tel" id="phoneInput" class="form-control"
                                                            name="phone" placeholder="Phone Number" required />
                                                            <span id="phoneError" class="error"></span>
                                                    </div>
                                                  
                                                    

                                                    <button type="submit" id="saveUserNewDetailsButton"
                                                        class="btn btn-primary">
                                                        Save Changes
                                                    </button>
                                                </form>
                                            </div>
                                            <!-- edit user details ends -->

                                            <!-- edit user password starts -->
                                            <div id="passwordEdit">
                                                <form id="passwordEditForm" style="display: none">
                                                    <div class="mb-3">
                                                        <input type="password" id="existingPassword"
                                                            class="form-control" name="existingPassword"
                                                            placeholder="Current Password" />
                                                        <span id="existingPasswordError" class="error"></span>
                                                    </div>
                                                    <div class="mb-3">
                                                        <input type="password" id="newPassword" class="form-control"
                                                            name="newPassword" placeholder="New Password" />
                                                        <span id="newPasswordError" class="error"></span>
                                                    </div>
                                                    <div class="mb-3">
                                                        <input type="password" id="confirmPassword" class="form-control"
                                                            name="confirmPassword" placeholder="Confirm Password" />
                                                        <span id="confirmPasswordError" class="error"></span>
                                                    </div>
           
                                                    <button type="submit" id="saveUserNewPasswordButton"
                                                        class="btn btn-primary">
                                                        Save Changes
                                                    </button>
                                                </form>
                                            </div>
                                            <!-- edit user password ends -->
                                        </div>
                                    </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </main>

        <%- include('../layouts/userLayouts/footer') %>

            <script>
                //validation starts for resetting the password
                const existingPasswordInput = document.getElementById("existingPassword");
                const existingPasswordError = document.getElementById(
                    "existingPasswordError"
                );

                const validateExistingPassword = () => {
                    if (existingPasswordInput.value.trim() === "") {
                        existingPasswordError.textContent = "* current password is required";
                        return false;
                    } else if (existingPasswordInput.value.trim().length < 5) {
                        existingPasswordError.textContent =
                            "* current password should be atleast 5 charactors";
                        return false;
                    } else {
                        existingPasswordError.textContent = "";
                        return true;
                    }
                };
                existingPasswordInput.addEventListener("input", validateExistingPassword);

                //validation for new password
                const newPasswordInput = document.getElementById("newPassword");
                const newPasswordError = document.getElementById("newPasswordError");

                const validateNewPassword = () => {
                    if (newPasswordInput.value.trim() === "") {
                        newPasswordError.textContent = "*new password is required";
                        return false;
                    } else if (newPasswordInput.value.trim().length < 5) {
                        newPasswordError.textContent =
                            "* new password should be atleast 5 charactors";
                        return false;
                    } else {
                        newPasswordError.textContent = "";
                        return true;
                    }
                };

                newPasswordInput.addEventListener("input", validateNewPassword);

                //validation for confirm password field
                const confirmPasswordInput = document.getElementById("confirmPassword");
                const confirmPasswordError = document.getElementById("confirmPasswordError");



                const validateConfirmPassword = () => {
                    if (confirmPasswordInput.value.trim() === "") {
                        confirmPasswordError.textContent = "* confirm password is required";
                        return false;
                    } else if (confirmPasswordInput.value.trim().length < 5) {
                        confirmPasswordError.textContent =
                            "* confirm password should be atleast 5 charactors";
                        return false;
                    } else if (confirmPasswordInput.value !== newPasswordInput.value) {
                        confirmPasswordError.textContent =
                            "* Confirm password must match new password";
                        return false;
                    } else {
                        confirmPasswordError.textContent = "";
                        return true;
                    }
                };
                confirmPasswordInput.addEventListener("input", validateConfirmPassword);

                const isPasswordResettingValid = () => {
                    return (
                        validateExistingPassword() &&
                        validateNewPassword() &&
                        validateConfirmPassword()
                    );
                };

                //validation ends for resetting the password

                const editUserPassword = (id) => {
                    console.log(`id to edit the password`, id);

                    const userInfoDisplay = document.getElementById("userInfoDisplay");
                    const editPasswordForm = document.getElementById("passwordEditForm");

                    userInfoDisplay.style.display = "none";
                    editPasswordForm.style.display = "block";

                    const existingPasswordInput = document.getElementById("existingPassword");
                    const newPasswordInput = document.getElementById("newPassword");
                    const confirmPasswordInput = document.getElementById("confirmPassword");

                    const saveUserNewPasswordButton = document.getElementById(
                        "saveUserNewPasswordButton"
                    );

                    saveUserNewPasswordButton.addEventListener("click", () => {
                        event.preventDefault();

                        if (isPasswordResettingValid()) {
                            Swal.fire({
                                title: 'Edit Password',
                            text: 'Are you sure you want to edit your passoword?',
                            showCancelButton: true,
                            confirmButtonColor: '#007bff',
                            cancelButtonColor: '#FFFFFF',
                            confirmButtonText: 'SAVE',
                            cancelButtonText: 'CANCEL',
                            customClass: {
                            cancelButton: 'custom-cancel-button',
                            confirmButton: 'custom-confirm-button'
                            }
                        }).then((result)=>{

                            if (result.isConfirmed) {
                                const updatedPasswordDetails = {
                                    id,
                                    existingPassword: existingPasswordInput.value,
                                    newPassword: newPasswordInput.value,
                                    confirmPassword: confirmPasswordInput.value,
                                };

                                console.log(`front end password details`, updatedPasswordDetails);
                                fetch(`http://localhost:7000/profile/`, {
                                    method: "PATCH",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },

                                    body: JSON.stringify({ updatedPasswordDetails }),
                                })
                                    .then((response) => {
                                        if (response.status === 401) {
                                            throw new Error("Incorrect existing password");
                                        } else if (response.status === 404) {
                                            throw new Error("User not found");
                                        }

                                        return response.json();
                                    })
                                    .then((data) => {
                                        if (data.success && !data.incorrectPassword) {
                                            console.log(`password edited successfully`);
                                            displaySuccessMessage(data.message);
                                            userInfoDisplay.style.display = "block";
                                            editPasswordForm.style.display = "none";
                                        }
                                    })
                                    .catch((error) => {
                                        console.log(`error received`, error.message);
                                        displayErrorMessage(error.message);
                                        userInfoDisplay.style.display = "block";
                                        editPasswordForm.style.display = "none";
                                    });
                            }

                        })

                            
                        }
                    });
                };

                const fnameInput = document.getElementById("fnameInput");
                const lnameInput = document.getElementById("lnameInput");
                const phoneInput = document.getElementById("phoneInput");

                const fnameError = document.getElementById("fnameError");
                const lnameError = document.getElementById("lnameError");
                const phoneError = document.getElementById("phoneError");


                const validateFirstName = () => {
                if (fnameInput.value.trim() === "") {
                    fnameError.textContent = "* First name is required";
                    return false;
                } else {
                    fnameError.textContent = "";
                    return true;
                }
              };
                const validateLastName = () => {
                    if (lnameInput.value.trim() === "") {
                        lnameError.textContent = "* Last name is required";
                        return false;
                    } else {
                        lnameError.textContent = "";
                        return true;
                    }
                };

                const validatePhone = () => {
                if (phoneInput.value.trim() === "") {
                    phoneError.textContent = "* Phone number is required";
                    return false;
                } else if (!/^\d{10}$/.test(phoneInput.value.trim())) {
                    phoneError.textContent = "* Phone number should be 10 digits";
                    return false;
                } else {
                    phoneError.textContent = "";
                    return true;
                }
            };

            fnameInput.addEventListener("input", validateFirstName);
            lnameInput.addEventListener("input", validateLastName);
            phoneInput.addEventListener("input", validatePhone);

            const isUserDetailsValid = () => {
                return validateFirstName() && validateLastName() && validatePhone();
            };



                const editUserDetails = (id, firstName, lastName, phone) => {

                    console.log(id, firstName, lastName, phone);

                    const userInfoDisplay = document.getElementById("userInfoDisplay");

                    const editUserForm = document.getElementById("editUserForm");

                    userInfoDisplay.style.display = "none";
                    editUserForm.style.display = "block";

                    const firstNameInput = document.getElementById("fnameInput");
                    const lastNameInput = document.getElementById("lnameInput");
                    const phoneInput = document.getElementById("phoneInput");

                    firstNameInput.value = firstName;
                    lastNameInput.value = lastName;
                    phoneInput.value = phone;

                    const saveUserNewDetailsButton = document.getElementById(
                        "saveUserNewDetailsButton"
                    );

                    saveUserNewDetailsButton.addEventListener("click", () => {
                        event.preventDefault();

                        if(isUserDetailsValid()){
                            Swal.fire({
                                title: 'Edit profile',
                            text: 'Are you sure you want to edit the profile?',
                            showCancelButton: true,
                            confirmButtonColor: '#007bff',
                            cancelButtonColor: '#FFFFFF',
                            confirmButtonText: 'SAVE',
                            cancelButtonText: 'CANCEL',
                            customClass: {
                            cancelButton: 'custom-cancel-button',
                            confirmButton: 'custom-confirm-button'
                            }
                        }).then((result)=>{

                            if (result.isConfirmed) {
                            const updatedUserDetails = {
                                id,
                                firstName: firstNameInput.value,
                                lastName: lastNameInput.value,
                                phone: phoneInput.value,
                            };

                            fetch(`http://localhost:7000/profile/`, {
                                method: "PUT",
                                headers: {
                                    "Content-Type": "application/json",
                                },

                                body: JSON.stringify({ updatedUserDetails, id }),
                            })
                                .then((response) => {
                                    if (!response.ok) {
                                        throw new Error("Network response was not ok");
                                    }

                                    return response.json();
                                })
                                .then((data) => {
                                    console.log(`received edited data`, data);
                                    if (data.success) {
                                        document.getElementById(
                                            "userName"
                                        ).innerHTML = `<strong>Name:</strong> ${data.updatedData.fname} ${data.updatedData.lname}`;
                                        document.getElementById(
                                            "userPhone"
                                        ).innerHTML = `<strong>Phone:</strong> ${data.updatedData.phone}`;
                                        userInfoDisplay.style.display = "block";
                                        editUserForm.style.display = "none";

                                        displaySuccessMessage(data.message);
                                    } else {
                                        throw new Error(data.message);
                                    }
                                })
                                .catch((error) => {
                                    console.log(`error received editing the data`);

                                    displayErrorMessage(error.message);
                                });
                            }
                        })

                        }
                       
                    });
                };

                const displayErrorMessage = (message) => {
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: message,
        toast: true,
        position: 'top-right',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });
};

const displaySuccessMessage = (message) => {
    Swal.fire({
        icon: 'success',
        title: 'Success',
        text: message,
        toast: true,
        position: 'top-right',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });
};
            </script>